// Autogenerated by Thrift Compiler (0.9.1)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package main

import (
	"flag"
	"fmt"
	"git.apache.org/thrift.git/lib/go/thrift"
	"math"
	"miliaothrift/misearch/gamerec"
	"net"
	"net/url"
	"os"
	"strconv"
	"strings"
)

func Usage() {
	fmt.Fprintln(os.Stderr, "Usage of ", os.Args[0], " [-h host:port] [-u url] [-f[ramed]] function [arg1 [arg2...]]:")
	flag.PrintDefaults()
	fmt.Fprintln(os.Stderr, "\nFunctions:")
	fmt.Fprintln(os.Stderr, "  string similarGame(string key, i32 count, string params)")
	fmt.Fprintln(os.Stderr, "  string personalGamePortal(string userId, i32 count,  params)")
	fmt.Fprintln(os.Stderr, "  string personalGameStatic(string userId, i32 count,  params)")
	fmt.Fprintln(os.Stderr, "  string personalGamePortalByMd5(string userId, i32 count,  params)")
	fmt.Fprintln(os.Stderr, "  string personalGameStaticByMd5(string userId, i32 count,  params)")
	fmt.Fprintln(os.Stderr, "  string subjectGame(string userId, i32 count, i32 gameCount,  params)")
	fmt.Fprintln(os.Stderr, "   multipleGameMetaRec(string userId,  requests,  params)")
	fmt.Fprintln(os.Stderr, "  string getName()")
	fmt.Fprintln(os.Stderr, "   getCounters()")
	fmt.Fprintln(os.Stderr, "   getCountersByCategory(string prefix)")
	fmt.Fprintln(os.Stderr, "   getCounterNames()")
	fmt.Fprintln(os.Stderr, "  i64 getCounter(string key)")
	fmt.Fprintln(os.Stderr, "  i64 aliveSince()")
	fmt.Fprintln(os.Stderr, "  void shutdown()")
	fmt.Fprintln(os.Stderr, "  void setLogLevel(string name, string level)")
	fmt.Fprintln(os.Stderr, "   getPerfCounters()")
	fmt.Fprintln(os.Stderr)
	os.Exit(0)
}

func main() {
	flag.Usage = Usage
	var host string
	var port int
	var protocol string
	var urlString string
	var framed bool
	var useHttp bool
	var parsedUrl url.URL
	var trans thrift.TTransport
	_ = math.MinInt32 // will become unneeded eventually
	_ = strconv.Atoi
	flag.Usage = Usage
	flag.StringVar(&host, "h", "localhost", "Specify host and port")
	flag.IntVar(&port, "p", 9090, "Specify port")
	flag.StringVar(&protocol, "P", "binary", "Specify the protocol (binary, compact, simplejson, json)")
	flag.StringVar(&urlString, "u", "", "Specify the url")
	flag.BoolVar(&framed, "framed", false, "Use framed transport")
	flag.BoolVar(&useHttp, "http", false, "Use http")
	flag.Parse()

	if len(urlString) > 0 {
		parsedUrl, err := url.Parse(urlString)
		if err != nil {
			fmt.Fprintln(os.Stderr, "Error parsing URL: ", err)
			flag.Usage()
		}
		host = parsedUrl.Host
		useHttp = len(parsedUrl.Scheme) <= 0 || parsedUrl.Scheme == "http"
	} else if useHttp {
		_, err := url.Parse(fmt.Sprint("http://", host, ":", port))
		if err != nil {
			fmt.Fprintln(os.Stderr, "Error parsing URL: ", err)
			flag.Usage()
		}
	}

	cmd := flag.Arg(0)
	var err error
	if useHttp {
		trans, err = thrift.NewTHttpClient(parsedUrl.String())
	} else {
		portStr := fmt.Sprint(port)
		if strings.Contains(host, ":") {
			host, portStr, err = net.SplitHostPort(host)
			if err != nil {
				fmt.Fprintln(os.Stderr, "error with host:", err)
				os.Exit(1)
			}
		}
		trans, err = thrift.NewTSocket(net.JoinHostPort(host, portStr))
		if err != nil {
			fmt.Fprintln(os.Stderr, "error resolving address:", err)
			os.Exit(1)
		}
		if framed {
			trans = thrift.NewTFramedTransport(trans)
		}
	}
	if err != nil {
		fmt.Fprintln(os.Stderr, "Error creating transport", err)
		os.Exit(1)
	}
	defer trans.Close()
	var protocolFactory thrift.TProtocolFactory
	switch protocol {
	case "compact":
		protocolFactory = thrift.NewTCompactProtocolFactory()
		break
	case "simplejson":
		protocolFactory = thrift.NewTSimpleJSONProtocolFactory()
		break
	case "json":
		protocolFactory = thrift.NewTJSONProtocolFactory()
		break
	case "binary", "":
		protocolFactory = thrift.NewTBinaryProtocolFactoryDefault()
		break
	default:
		fmt.Fprintln(os.Stderr, "Invalid protocol specified: ", protocol)
		Usage()
		os.Exit(1)
	}
	client := gamerec.NewGameRecClientFactory(trans, protocolFactory)
	if err := trans.Open(); err != nil {
		fmt.Fprintln(os.Stderr, "Error opening socket to ", host, ":", port, " ", err)
		os.Exit(1)
	}

	switch cmd {
	case "similarGame":
		if flag.NArg()-1 != 3 {
			fmt.Fprintln(os.Stderr, "SimilarGame requires 3 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		tmp1, err45 := (strconv.Atoi(flag.Arg(2)))
		if err45 != nil {
			Usage()
			return
		}
		argvalue1 := int32(tmp1)
		value1 := argvalue1
		argvalue2 := flag.Arg(3)
		value2 := argvalue2
		fmt.Print(client.SimilarGame(value0, value1, value2))
		fmt.Print("\n")
		break
	case "personalGamePortal":
		if flag.NArg()-1 != 3 {
			fmt.Fprintln(os.Stderr, "PersonalGamePortal requires 3 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		tmp1, err48 := (strconv.Atoi(flag.Arg(2)))
		if err48 != nil {
			Usage()
			return
		}
		argvalue1 := int32(tmp1)
		value1 := argvalue1
		arg49 := flag.Arg(3)
		mbTrans50 := thrift.NewTMemoryBufferLen(len(arg49))
		defer mbTrans50.Close()
		_, err51 := mbTrans50.WriteString(arg49)
		if err51 != nil {
			Usage()
			return
		}
		factory52 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt53 := factory52.GetProtocol(mbTrans50)
		containerStruct2 := gamerec.NewPersonalGamePortalArgs()
		err54 := containerStruct2.ReadField3(jsProt53)
		if err54 != nil {
			Usage()
			return
		}
		argvalue2 := containerStruct2.Params
		value2 := argvalue2
		fmt.Print(client.PersonalGamePortal(value0, value1, value2))
		fmt.Print("\n")
		break
	case "personalGameStatic":
		if flag.NArg()-1 != 3 {
			fmt.Fprintln(os.Stderr, "PersonalGameStatic requires 3 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		tmp1, err56 := (strconv.Atoi(flag.Arg(2)))
		if err56 != nil {
			Usage()
			return
		}
		argvalue1 := int32(tmp1)
		value1 := argvalue1
		arg57 := flag.Arg(3)
		mbTrans58 := thrift.NewTMemoryBufferLen(len(arg57))
		defer mbTrans58.Close()
		_, err59 := mbTrans58.WriteString(arg57)
		if err59 != nil {
			Usage()
			return
		}
		factory60 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt61 := factory60.GetProtocol(mbTrans58)
		containerStruct2 := gamerec.NewPersonalGameStaticArgs()
		err62 := containerStruct2.ReadField3(jsProt61)
		if err62 != nil {
			Usage()
			return
		}
		argvalue2 := containerStruct2.Params
		value2 := argvalue2
		fmt.Print(client.PersonalGameStatic(value0, value1, value2))
		fmt.Print("\n")
		break
	case "personalGamePortalByMd5":
		if flag.NArg()-1 != 3 {
			fmt.Fprintln(os.Stderr, "PersonalGamePortalByMd5 requires 3 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		tmp1, err64 := (strconv.Atoi(flag.Arg(2)))
		if err64 != nil {
			Usage()
			return
		}
		argvalue1 := int32(tmp1)
		value1 := argvalue1
		arg65 := flag.Arg(3)
		mbTrans66 := thrift.NewTMemoryBufferLen(len(arg65))
		defer mbTrans66.Close()
		_, err67 := mbTrans66.WriteString(arg65)
		if err67 != nil {
			Usage()
			return
		}
		factory68 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt69 := factory68.GetProtocol(mbTrans66)
		containerStruct2 := gamerec.NewPersonalGamePortalByMd5Args()
		err70 := containerStruct2.ReadField3(jsProt69)
		if err70 != nil {
			Usage()
			return
		}
		argvalue2 := containerStruct2.Params
		value2 := argvalue2
		fmt.Print(client.PersonalGamePortalByMd5(value0, value1, value2))
		fmt.Print("\n")
		break
	case "personalGameStaticByMd5":
		if flag.NArg()-1 != 3 {
			fmt.Fprintln(os.Stderr, "PersonalGameStaticByMd5 requires 3 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		tmp1, err72 := (strconv.Atoi(flag.Arg(2)))
		if err72 != nil {
			Usage()
			return
		}
		argvalue1 := int32(tmp1)
		value1 := argvalue1
		arg73 := flag.Arg(3)
		mbTrans74 := thrift.NewTMemoryBufferLen(len(arg73))
		defer mbTrans74.Close()
		_, err75 := mbTrans74.WriteString(arg73)
		if err75 != nil {
			Usage()
			return
		}
		factory76 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt77 := factory76.GetProtocol(mbTrans74)
		containerStruct2 := gamerec.NewPersonalGameStaticByMd5Args()
		err78 := containerStruct2.ReadField3(jsProt77)
		if err78 != nil {
			Usage()
			return
		}
		argvalue2 := containerStruct2.Params
		value2 := argvalue2
		fmt.Print(client.PersonalGameStaticByMd5(value0, value1, value2))
		fmt.Print("\n")
		break
	case "subjectGame":
		if flag.NArg()-1 != 4 {
			fmt.Fprintln(os.Stderr, "SubjectGame requires 4 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		tmp1, err80 := (strconv.Atoi(flag.Arg(2)))
		if err80 != nil {
			Usage()
			return
		}
		argvalue1 := int32(tmp1)
		value1 := argvalue1
		tmp2, err81 := (strconv.Atoi(flag.Arg(3)))
		if err81 != nil {
			Usage()
			return
		}
		argvalue2 := int32(tmp2)
		value2 := argvalue2
		arg82 := flag.Arg(4)
		mbTrans83 := thrift.NewTMemoryBufferLen(len(arg82))
		defer mbTrans83.Close()
		_, err84 := mbTrans83.WriteString(arg82)
		if err84 != nil {
			Usage()
			return
		}
		factory85 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt86 := factory85.GetProtocol(mbTrans83)
		containerStruct3 := gamerec.NewSubjectGameArgs()
		err87 := containerStruct3.ReadField4(jsProt86)
		if err87 != nil {
			Usage()
			return
		}
		argvalue3 := containerStruct3.Params
		value3 := argvalue3
		fmt.Print(client.SubjectGame(value0, value1, value2, value3))
		fmt.Print("\n")
		break
	case "multipleGameMetaRec":
		if flag.NArg()-1 != 3 {
			fmt.Fprintln(os.Stderr, "MultipleGameMetaRec requires 3 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		arg89 := flag.Arg(2)
		mbTrans90 := thrift.NewTMemoryBufferLen(len(arg89))
		defer mbTrans90.Close()
		_, err91 := mbTrans90.WriteString(arg89)
		if err91 != nil {
			Usage()
			return
		}
		factory92 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt93 := factory92.GetProtocol(mbTrans90)
		containerStruct1 := gamerec.NewMultipleGameMetaRecArgs()
		err94 := containerStruct1.ReadField2(jsProt93)
		if err94 != nil {
			Usage()
			return
		}
		argvalue1 := containerStruct1.Requests
		value1 := argvalue1
		arg95 := flag.Arg(3)
		mbTrans96 := thrift.NewTMemoryBufferLen(len(arg95))
		defer mbTrans96.Close()
		_, err97 := mbTrans96.WriteString(arg95)
		if err97 != nil {
			Usage()
			return
		}
		factory98 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt99 := factory98.GetProtocol(mbTrans96)
		containerStruct2 := gamerec.NewMultipleGameMetaRecArgs()
		err100 := containerStruct2.ReadField3(jsProt99)
		if err100 != nil {
			Usage()
			return
		}
		argvalue2 := containerStruct2.Params
		value2 := argvalue2
		fmt.Print(client.MultipleGameMetaRec(value0, value1, value2))
		fmt.Print("\n")
		break
	case "getName":
		if flag.NArg()-1 != 0 {
			fmt.Fprintln(os.Stderr, "GetName requires 0 args")
			flag.Usage()
		}
		fmt.Print(client.GetName())
		fmt.Print("\n")
		break
	case "getCounters":
		if flag.NArg()-1 != 0 {
			fmt.Fprintln(os.Stderr, "GetCounters requires 0 args")
			flag.Usage()
		}
		fmt.Print(client.GetCounters())
		fmt.Print("\n")
		break
	case "getCountersByCategory":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "GetCountersByCategory requires 1 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		fmt.Print(client.GetCountersByCategory(value0))
		fmt.Print("\n")
		break
	case "getCounterNames":
		if flag.NArg()-1 != 0 {
			fmt.Fprintln(os.Stderr, "GetCounterNames requires 0 args")
			flag.Usage()
		}
		fmt.Print(client.GetCounterNames())
		fmt.Print("\n")
		break
	case "getCounter":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "GetCounter requires 1 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		fmt.Print(client.GetCounter(value0))
		fmt.Print("\n")
		break
	case "aliveSince":
		if flag.NArg()-1 != 0 {
			fmt.Fprintln(os.Stderr, "AliveSince requires 0 args")
			flag.Usage()
		}
		fmt.Print(client.AliveSince())
		fmt.Print("\n")
		break
	case "shutdown":
		if flag.NArg()-1 != 0 {
			fmt.Fprintln(os.Stderr, "Shutdown requires 0 args")
			flag.Usage()
		}
		fmt.Print(client.Shutdown())
		fmt.Print("\n")
		break
	case "setLogLevel":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "SetLogLevel requires 2 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		fmt.Print(client.SetLogLevel(value0, value1))
		fmt.Print("\n")
		break
	case "getPerfCounters":
		if flag.NArg()-1 != 0 {
			fmt.Fprintln(os.Stderr, "GetPerfCounters requires 0 args")
			flag.Usage()
		}
		fmt.Print(client.GetPerfCounters())
		fmt.Print("\n")
		break
	case "":
		Usage()
		break
	default:
		fmt.Fprintln(os.Stderr, "Invalid function ", cmd)
	}
}
