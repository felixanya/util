// Autogenerated by Thrift Compiler (0.9.1)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package gamerec

import (
	"fmt"
	"git.apache.org/thrift.git/lib/go/thrift"
	"math"
	"miliaothrift/miliaoshared"
)

// (needed to ensure safety because of naive import list construction.)
var _ = math.MinInt32
var _ = thrift.ZERO
var _ = fmt.Printf

var _ = miliaoshared.GoUnusedProtection__
var GoUnusedProtection__ int

type MetaType int64

const (
	MetaType_GAME         MetaType = 1
	MetaType_MI_GAME      MetaType = 2
	MetaType_GAME_SUBJECT MetaType = 3
	MetaType_GAME_NEWS    MetaType = 4
	MetaType_GAME_GIFT    MetaType = 5
)

func (p MetaType) String() string {
	switch p {
	case MetaType_GAME:
		return "MetaType_GAME"
	case MetaType_MI_GAME:
		return "MetaType_MI_GAME"
	case MetaType_GAME_SUBJECT:
		return "MetaType_GAME_SUBJECT"
	case MetaType_GAME_NEWS:
		return "MetaType_GAME_NEWS"
	case MetaType_GAME_GIFT:
		return "MetaType_GAME_GIFT"
	}
	return "<UNSET>"
}

func MetaTypeFromString(s string) (MetaType, error) {
	switch s {
	case "MetaType_GAME":
		return MetaType_GAME, nil
	case "MetaType_MI_GAME":
		return MetaType_MI_GAME, nil
	case "MetaType_GAME_SUBJECT":
		return MetaType_GAME_SUBJECT, nil
	case "MetaType_GAME_NEWS":
		return MetaType_GAME_NEWS, nil
	case "MetaType_GAME_GIFT":
		return MetaType_GAME_GIFT, nil
	}
	return MetaType(math.MinInt32 - 1), fmt.Errorf("not a valid MetaType string")
}

type MetaRequest struct {
	TypeA1 MetaType `thrift:"type,1"`
	Count  int32    `thrift:"count,2"`
}

func NewMetaRequest() *MetaRequest {
	return &MetaRequest{
		TypeA1: math.MinInt32 - 1, // unset sentinal value
	}
}

func (p *MetaRequest) IsSetTypeA1() bool {
	return int64(p.TypeA1) != math.MinInt32-1
}

func (p *MetaRequest) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *MetaRequest) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 1: %s")
	} else {
		p.TypeA1 = MetaType(v)
	}
	return nil
}

func (p *MetaRequest) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 2: %s")
	} else {
		p.Count = v
	}
	return nil
}

func (p *MetaRequest) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("MetaRequest"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *MetaRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetTypeA1() {
		if err := oprot.WriteFieldBegin("type", thrift.I32, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:type: %s", p, err)
		}
		if err := oprot.WriteI32(int32(p.TypeA1)); err != nil {
			return fmt.Errorf("%T.type (1) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:type: %s", p, err)
		}
	}
	return err
}

func (p *MetaRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("count", thrift.I32, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:count: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.Count)); err != nil {
		return fmt.Errorf("%T.count (2) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:count: %s", p, err)
	}
	return err
}

func (p *MetaRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MetaRequest(%+v)", *p)
}
